name: Release
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version'
        required: true
        type: string
jobs:
  get_release_info_job:
    name: Get Release Info
    runs-on: windows-latest
    outputs:
      version: ${{ steps.get_release_info.outputs.version }}
      release_upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v4
      - id: get_release_info
        name: Get Release Info
        shell: pwsh
        run: |
          #Requires -Version "6.1"
          $version = "${{ inputs.version }}"
          $tagName = "release-v$version"
          $releaseName = "Release $version"
          Write-Host @"
          Version: $version
          Tag Name: $tagName
          "@
          echo "version=$version" >> $env:GITHUB_ENV
          echo "tag_name=$tagName" >> $env:GITHUB_ENV
          echo "release_name=$releaseName" >> $env:GITHUB_ENV
      - id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{steps.get_release_info.outputs.tag_name}}
          release_name: ${{steps.get_release_info.outputs.release_name}}
          draft: false
          prerelease: false

  release_windows_job:
    name: Release Windows
    runs-on: windows-latest
    needs: get_release_info_job
    steps:
      - name: Print Debug Info
        shell: pwsh
        run: |
          Write-Host @"
          Version: ${{ needs.get_release_info_job.outputs.version }}
          Release Upload URL: ${{ needs.get_release_info_job.outputs.release_upload_url }}
          "@
      - uses: actions/checkout@v4
      - id: get_this_release_info
        shell: pwsh
        run: |
          #Requires -Version "6.1"
          $osName = if ($IsWindows) { "win32" } elseif ($IsLinux) { "ubuntu" } else { "darwin" }
          $artifactPath = "FBX-glTF-conv-${{ needs.get_release_info_job.outputs.version }}-$osName.tgz"
          echo "artifact_path=$artifactPath" >> $GITHUB_ENV
      - id: build
        name: Build
        run: CI/build.sh -Version "${{ needs.get_release_info_job.outputs.version }}" -ArtifactPath "${{ steps.get_this_release_info.outputs.artifact_path }}"
        shell: bash
      - id: upload-release-asset
        name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.get_release_info_job.outputs.release_upload_url }}
          asset_path: ${{ steps.get_this_release_info.outputs.artifact_path }}
          asset_name: ${{ steps.get_this_release_info.outputs.artifact_path }}
          asset_content_type: application/zip

  release_darwin_job:
    name: Release MacOS
    runs-on: macos-latest
    needs: get_release_info_job
    steps:
      - name: Print Debug Info
        shell: pwsh
        run: |
          Write-Host @"
          Version: ${{ needs.get_release_info_job.outputs.version }}
          Release Upload URL: ${{ needs.get_release_info_job.outputs.release_upload_url }}
          "@
      - uses: actions/checkout@v4
      - id: get_this_release_info
        shell: pwsh
        run: |
          #Requires -Version "6.1"
          $osName = if ($IsWindows) { "win32" } elseif ($IsLinux) { "ubuntu" } else { "darwin" }
          $artifactPath = "FBX-glTF-conv-${{ needs.get_release_info_job.outputs.version }}-$osName.tgz"
          echo "artifact_path=$artifactPath" >> $env:GITHUB_ENV
      - id: build
        name: Build
        run: CI/build.sh -Version "${{ needs.get_release_info_job.outputs.version }}" -ArtifactPath "${{ steps.get_this_release_info.outputs.artifact_path }}"
        shell: bash
      - id: upload-release-asset
        name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.get_release_info_job.outputs.release_upload_url }}
          asset_path: ${{ steps.get_this_release_info.outputs.artifact_path }}
          asset_name: ${{ steps.get_this_release_info.outputs.artifact_path }}
          asset_content_type: application/zip

  release_types_job:
    name: Release TypeScript Declaration Files
    runs-on: windows-latest
    needs: get_release_info_job
    steps:
      - name: Print Debug Info
        shell: pwsh
        run: |
          Write-Host @"
          Version: ${{ needs.get_release_info_job.outputs.version }}
          Release Upload URL: ${{ needs.get_release_info_job.outputs.release_upload_url }}
          "@
      - uses: actions/checkout@v4
      - id: get_this_release_info
        shell: pwsh
        run: |
          #Requires -Version "6.1"
          $artifactPath = "FBX-glTF-conv-${{ needs.get_release_info_job.outputs.version }}-types.tgz"
          echo "artifact_path=$artifactPath" >> $env:GITHUB_ENV
      - id: build
        name: Build
        run: tar -czvf "${{ steps.get_this_release_info.outputs.artifact_path }}" -C types . 
        shell: bash
      - id: upload-release-asset
        name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.get_release_info_job.outputs.release_upload_url }}
          asset_path: ${{ steps.get_this_release_info.outputs.artifact_path }}
          asset_name: ${{ steps.get_this_release_info.outputs.artifact_path }}
          asset_content_type: application/zip

  publish_to_npm_job:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [release_windows_job, release_darwin_job, release_types_job]
    steps:
      - name: Download artifact
        id: download-artifact
        uses: dawidd6/action-download-artifact@v6
        with:
          run_id: ${{ github.event.workflow_run.id }}
          
      - name: Show downloaded files
        run: ls -la
      
      # - name: Copy files to publish directory
      #   run: |
      #     cp "${{ steps.get_this_release_info.outputs.artifact_path }}" publish/
      #     ls -l publish/

      # - uses: JS-DevTools/npm-publish@4b07b26a2f6e0a51846e1870223e545bae91c552
      #   if: github.event_name == 'release'
      #   with:
      #     token: ${{ secrets.NPM_PUBLISH }}
      #     registry: "https://registry.npmjs.org"
      #     package: publish